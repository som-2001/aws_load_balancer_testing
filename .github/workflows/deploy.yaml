name: Deploy to EC2 ASG

on:
  push:
    branches:
      - master  # Trigger on push to master branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup AWS CLI 
        run: |
          sudo apt-get update && sudo apt-get install -y awscli

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get Running ASG Instances
        id: get_instances
        run: |
          INSTANCES=$(aws autoscaling describe-auto-scaling-groups \
            --auto-scaling-group-names "${{ secrets.ASG_NAME }}" \
            --query "AutoScalingGroups[0].Instances[*].InstanceId" \
            --output text | tr '\n' ' ')

          if [[ -z "$INSTANCES" ]]; then
            echo "No instances found in ASG. Exiting."
            exit 1
          fi

          echo "INSTANCES=${INSTANCES}" >> $GITHUB_ENV

      - name: Get Public IPs of Instances
        run: |
          for instance in $INSTANCES; do
            IP=$(aws ec2 describe-instances --instance-ids $instance \
              --query "Reservations[0].Instances[0].PublicIpAddress" \
              --output text)

            if [[ "$IP" == "None" ]]; then
              echo "Skipping instance $instance as it has no public IP."
              continue
            fi

            echo "Deploying to $IP"
            echo "$IP" >> ec2-ips.txt
          done

      - name: Setup SSH Key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > pingMe.pem
          chmod 600 pingMe.pem

      - name: Add EC2 Host to Known Hosts
        run: |
          while IFS= read -r IP; do
            ssh-keyscan -H $IP >> ~/.ssh/known_hosts
          done < ec2-ips.txt

      - name: Deploy to EC2 Instances
        run: |
          while IFS= read -r IP; do
            echo "Deploying to $IP"

            ssh -o StrictHostKeyChecking=no -i pingMe.pem ubuntu@$IP <<EOF
              cd /home/ubuntu/aws_load_balancer_testing
              git pull origin master
              npm install
              pm2 delete node_backend || true
              pm2 start index.js --name node_backend
              pm2 save
            EOF

          done < ec2-ips.txt

      - name: Cleanup SSH Key
        if: always()
        run: rm -f pingMe.pem ec2-ips.txt
